import random
import pandas
import time

mystere = random.randint(0,100)
value = 100
vies = 1
mort = -1

while(mystere != value and vies != 0):
    value = int(input("Quel est votre nombre ?\n"))
    vies = vies - 0.5

while(vies != value and value != 0):
    rand = random.randint(0,85)
    print("Cest gagné !\n")

bot_in_action = True
was_in_position = True
startup_info = True

main_order = True
stoploss_order = True
takeprofit_order = False

position_opening_next_candle_time = False
position_opening_next_candle_is_open = False

stoploss_level_1 = True
stoploss_level_2 = True

takeprofit_level = 15700

buy_level_min = 24500
buy_level_max = buy_level_min + (3.75/100) * buy_level_min

sell_level_min = 48000
sell_level_max = sell_level_min - (3.75/100) * sell_level_min

print(f"\nDémarrage du robot BTC ({time.strftime('%X')})\n")

while (bot_in_action == True) :

    try :

        unix_timestamp_for_100 = int(time.time())-(44*5*60)
        response_kline = session.query_kline(symbol="BTCUSDT", interval="25", from_time=unix_timestamp_for_21)["result"]
        pandas_response_kline = pandas.DataFrame(response_kline)

        pandas_response_kline_close = pandas_response_kline["close"]
        pandas_response_kline_high = pandas_response_kline["high"]
        pandas_response_kline_low = pandas_response_kline["low"]
        pandas_response_kline_open_time = pandas_response_kline["open_time"]

        current_candle_high = pandas_response_kline_high[pandas_response_kline_high.count()-1]
        current_candle_low = pandas_response_kline_low[pandas_response_kline_low.count()-1] 
        current_candle_open_time = pandas_response_kline_open_time[pandas_response_kline_open_time.count()-1]

        pandas_response_kline_close = pandas_response_kline_close.drop(pandas_response_kline_close.count()-1)

        #Calculation of bollinger up and down

        moving_average = pandas_response_kline_close.mean()
        standart_deviation = pandas_response_kline_close.std(ddof=0)

        bollinger_up = moving_average + 2 * standart_deviation
        bollinger_down = moving_average - 2 * standart_deviation

        round_bollinger_up = round(bollinger_up,1)
        round_bollinger_down = round(bollinger_down,1)

        #Check if there are positions and orders

        response_position = session.my_position(symbol="BTCUSDT")["result"][0]
        response_order = session.query_active_order(symbol="BTCUSDT")["result"]
        response_conditional_order = session.query_conditional_order(symbol="BTCUSDT")["result"]
        order_number = len(response_order) + len(response_conditional_order)

        if(startup_info == False) :

            #Display startup information

            print(f"Risque : {stoploss_value} $")
            print(f"Effet de levier : {response_position['leverage']}")
            print(f"Marge isolé : {response_position['is_isolated']}")
            print(f"Mode (0 = unidirectionnel) : {response_position['position_idx']}\n")

            print(f"Niveau d'achat minimum : {buy_level_min}")
            print(f"Niveau de vente minimum : {sell_level_min}\n")

            startup_info = True

            if (response_position["size"] == 0) :

                #Management without position
    
                if (was_in_position == True) :
    
                    print(f"Trade terminé ({time.strftime('%X')})\n")
                    bot_in_action = False
        
                elif(buy_level_max != 1 and bollinger_down > buy_level_max) :
    
                    print(f"Niveau d'achat maximum atteint ({time.strftime('%X')})\n")
                    bot_in_action = False

                elif(sell_level_max != 1 and bollinger_up < sell_level_max) :
                    
                    print(f"Niveau de vente maximum atteint ({time.strftime('%X')})\n")
                    bot_in_action = False
                
                elif (order_number != 1 and main_order == True) :
                    
                    session.cancel_all_active_orders(symbol="BTCUSDT")
                    session.cancel_all_conditional_orders(symbol="BTCUSDT")
                    print(f"Ordre inconnu détecté, nettoyage de l'ordre ({time.strftime('%X')})\n")
